#!/usr/bin/env node
var path = require('path');
var fs = require('fs');
var mkdirp = require('mkdirp');
var docopt = require('docopt').docopt;
var loadstar = require('../lib');
var builder = require('../lib/builder');
var package = require('../package');

var doc = fs.readFileSync(path.join(__dirname, 'docopt.txt'), 'utf8');
var result = docopt(doc, {version: package.version, help: true});
var deps = {};

var key = result['<key>'];

var entries = result['<entry>'].map(function(s) {
  var split = s.split('::');
  var input = path.join(process.cwd(), split[0]);
  var output = split[1] ? path.join(process.cwd(), split[1]) : null;
  return [input, output];
});

var options = {
  prefix: result['--prefix'] || '/dev',
  rootDir: path.resolve(process.cwd(), (result['--rootDir'] || '.')),
  one: entries.length === 1,
  dev: result.build,
  amd: result['--amd']
};

var allDeps = {};

entries.forEach(function(entry) {
  var inputFile = entry[0];
  var outputFile = entry[1];

  require(inputFile);
  if (!options.one && !outputFile) return;

  var data = loadstar.store[key];
  if (!data) throw new Error('No key matching: '+key);

  var result = builder.make(data, options);
  if (outputFile) {
    mkdirp.sync(path.dirname(outputFile));
    fs.writeFileSync(outputFile, result, 'utf8');
    console.log('loadstar: ', path.relative(process.cwd(), outputFile));
  } else {
    console.log(result);
  }

  if (outputFile) {
    var outputDeps = deps[path.relative(options.rootDir, outputFile)] = {};
    for (filename in data.buildList) {
      outputDeps[filename] = true;
    }
    for (filename in data.appList) {
      if (!allDeps[filename] && !options.dev) outputDeps[filename] = true;
      allDeps[filename] = true;
    }
  }
});

var outputDepsFile = result['--deps'];
if (outputDepsFile) {
  var output = '';
  for (key in deps) {
    output += key + ': ' + Object.keys(deps[key]).map(function(f) {
      return builder.resolvePath(f, options.rootDir);
    }).join(' ') + '\n';
  }
  mkdirp.sync(path.dirname(outputDepsFile));
  fs.writeFileSync(outputDepsFile, output, 'utf8');
};
